'use strict';

const assert = require('assert');
const error = require('http-errors');
const fs = require('fs');
const moment = require('moment');
const {promisify} = require('util');
const {sprintf} = require('sprintf-js');
const {spawn} = require('child_process');
const path = require('path');

const readFile = promisify(fs.readFile);

const ASN_1_DATE = 'YYMMDDHHmmss[Z]';


/**
 * Generate client certificate and certificate key for given name. Optionally encrypt the key with
 * a given passphrase.
 *
 * This function is using a file-based locking mechanism - only one certificate can be generated at
 * any given time. Issued certs are registered in index.txt, aiming to be compatible with EasyRSA's
 * revocation mechanism.
 *
 * This is assumed to be sufficiently robust for a small-scale deployment, for larger system a
 * database-backed solution would likely be a better solution.
 */
exports.MkCert = async (config, endpointName, name, passphrase = null) => {
  const paths = certPaths(pkiPath, cn);
  const {cacert, cakey} = config.pki;
  const opensslConf = config.openssl.config;
  const keySize = config.endpoints[endpointName].keysize;

  await genReq(name, keySize, opensslConf, paths);
  await signReq(name, opensslConf, paths);

  return paths;
};


/**
 * Generates an OpenSSL certificate signing request
 */
const genReq = async (cn, keySize, opensslConf, {pkiPath, keyPath, reqPath}) => {
  const args = ['req', '-utf8', '-new',
    '-newkey', `rsa:${keySize}`,
    '-config', opensslConf,
    '-keyout', keyPath,
    '-out', reqPath,
    '-nodes', // no password 
    '-batch'
  ];
  
  await execOpensslCmd(args, pkiPath, cn);
  
  console.log('Key written to', keyPath);
  console.log('Req written to', reqPath);
}


/**
 * Signs an OpenSSL CSR
 */
const signReq = async (cn, opensslConf, {pkiPath, reqPath, certPath}) => {
  const args = ['ca', '-utf8', 
    '-in', reqPath, 
    '-out', certPath,
    '-config', opensslConf, 
    '-batch'
  ];

  await execOpensslCmd(args, pkiPath, cn);
  console.log('Cert written to', certPath);
}


/**
 * Execute a command in the context of the OpenSSL ca generated by easyrsa. Sets up the execution
 * environment to mimic the one provided by the easyrsa tool.
 * 
 * @param {*[]string} args command args
 * @param {*string} pkiPath path to pki initalized by easysa
 * @param {*string} cn common name of the certificate to work with
 */
const execOpensslCmd = (args, pkiPath, cn) => {
  const cmd = '/usr/bin/openssl';

  console.log('Executing',cmd,args.join(' '));

  return new Promise((resolve, reject) => {
    const opts = {
      env: {
        EASYRSA_PKI: pkiPath,
        EASYRSA_CERT_EXPIRE: '3650',
        EASYRSA_CRL_DAYS: '180',
        EASYRSA_DIGEST: 'sha256',
        EASYRSA_KEY_SIZE: '2048',
        EASYRSA_DN: 'cn_only',
        EASYRSA_REQ_CN: cn,
        EASYRSA_REQ_COUNTRY: 'US',
        EASYRSA_REQ_PROVINCE: 'California',
        EASYRSA_REQ_CITY: 'San Francisco',
        EASYRSA_REQ_ORG: 'Copyleft Certificate Co',
        EASYRSA_REQ_OU: 'My Organizational Unit',
        EASYRSA_REQ_EMAIL: 'me@example.net',
      }
    };
    const cp = spawn(cmd, args, opts);

    const parts = [];
    cp.stdout.on('data', b => parts.push(b));
    cp.stderr.on('data', b => parts.push(b));

    cp.on('error', err => {
      cpFail(err, parts);
      reject(err);
    });

    cp.on('exit', code => {
      if (code == 0) {
        console.log('Child process exited with code', code);
        resolve();
      }
      else {
        const err = new Error('Child process exited with code '+code);
        cpFail(err, parts);
        reject(err);
      }
    });
  });
}


/**
 * Used when child process fails, concatenates output buffers and prints them
 * @param {*int} code exit code returned by the program
 * @param {*[]Buffer} out output collected from the child process
 */
const cpFail = (code, out) => {
  console.error('Child process failed, see output below');
  console.error(Buffer.concat(out).toString('utf-8'));
}


/**
 * List certificates
 * @param {*object} config system config
 */
exports.ListCerts = async (config) => {
  const indexFile = config.pki.index;
  const data = await readFile(indexFile, {encoding: 'utf-8'});
  
  return data
    .split("\n")
    .slice(0, -1)
    .map(line => {
      // replace consecutive tabs with single ; then split
      const [state, exp, srl, _, subject] = line.replace(/\t+/g, ";").split(";");

      // TODO: properly parse X.500 DN?
      const name = subject.match(/\/CN=(\w+)/)[1];
      const expires = moment(exp, ASN_1_DATE).toJSON();
      const serial = parseInt(srl);

      return {state, subject, name, expires, serial};
    })
    .filter(c => c.name != 'server');
}


/**
 * Load the certs for given entity and return them along with the dh params and ca cert
 * @param {*object} config app config
 * @param {*string} name name of the entity to retrieve certs for
 */
exports.LoadCerts = async (config, name) => {
  const {keyPath, certPath} = certPaths(config.pki.path, name);
  const caPath = config.pki.cacert;
  const dhPath = config.pki.dh;

  const privateKey = await readFile(keyPath, {encoding: 'utf-8'});
  const certificate = await readFile(certPath, {encoding: 'utf-8'});
  const dh = await readFile(dhPath, {encoding: 'utf-8'});
  const ca = await readFile(caPath, {encoding: 'utf-8'});

  return {privateKey, certificate, dh, ca};
}


const validateCerts = (certs) => {
  assert(certs.privateKey, 'Invalid or missing private key');
  assert(certs.publicKey, 'Invalid or missing public key');
  assert(certs.certificate, 'Invalid certificate');
}


/**
 * Generates the file names used to store certificate and private key for given client name based
 * on given easyrsa pki base path.
 */
const certPaths = module.exports.certPaths = (pkiPath, name) => {
  const keyPath = path.join(pkiPath, 'private', name+'.key');
  const certPath = path.join(pkiPath, 'issued', name+'.crt');
  const reqPath = path.join(pkiPath, 'reqs', name+'.csr');
  return {pkiPath, keyPath, certPath, reqPath};
}
